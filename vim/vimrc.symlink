runtime bundle/vim-pathogen/autoload/pathogen.vim

call pathogen#infect()
syntax on
filetype plugin indent on

set noswapfile
set nobackup
set nocompatible
set gdefault


" Quickly edit/reload the vimrc file
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
endif

set hidden
set encoding=utf-8
" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autoindent             " automatic indent new lines
set smartindent            " be smart about it
set copyindent             " copy the previous indentation on autoindenting
set nowrap                 " do not wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set smarttab
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default

let g:Powerline_symbols = 'fancy'

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" sane searching
nnoremap / /\v
vnoremap / /\v

"clear search
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

" lets me use w!! if forgot the sudo business
cmap w!! w !sudo tee % >/dev/null

" split plz
nnoremap <leader><bar> <C-w>v<C-w>l
nnoremap <leader>- :split<cr><C-w>k

"NerdTree
map <leader>n :NERDTreeToggle<cr>

"tagbar
map <leader>t :TagbarToggle<cr>

"easy switching between buffers
nnoremap <leader><leader> <c-^>

" copy to clipboard
nnoremap <leader>c gg"*yG

" Prompt for a command to run
map <Leader>rp :PromptVimTmuxCommand<CR>

" Run last command executed by RunVimTmuxCommand
map <Leader>rl :RunLastVimTmuxCommand<CR>

" Close all other tmux panes in current window
map <Leader>rx :CloseVimTmuxPanes<CR>

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <Leader>rs "vy :call RunVimTmuxCommand(@v)<CR>

" Select current paragraph and send it to tmux
nmap <Leader>rs vip<Leader>vs<CR>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set gdefault
set ruler                  " show the cursor position all the time
set showmode
set scrolloff=3
set showcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=1                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set ttyfast

" sets colors
set t_Co=256

colorscheme twilight256
if has("gui_running")
  set guioptions=aegimrLt
  set guifont=Menlo_Regular:h14
  colorscheme desert256
  set transparency=15
endif

set list
set listchars=nbsp:·,trail:·,tab:▸\ ,eol:¬
set wildignore+=*.o,*.obj,.git,*.pyc
" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch               " highlight searches
set relativenumber
set visualbell             " shut the fuck up


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

"autocmd examples
"autocmd filetype python set expandtab

" Whitespace helper from http://vimcasts.org/episodes/tabs-and-spaces/
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction


if has('autocmd')
  autocmd FileType mvn_pom setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType ftl setlocal ts=4 sts=4 sw=4 noexpandtab
endif

"setup coffeetags
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif

au BufNewFile,BufRead *.zul set filetype=xml
au BufNewFile,BufRead *.ftl set filetype=ftl

" vimwiki stuffs
let g:vimwiki_list = [
\ {'path': '~/.wiki', 'syntax': 'markdown'}
\]
