set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

"main vim
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'bling/vim-airline'
Plugin 'majutsushi/tagbar'
Plugin 'Valloric/YouCompleteMe'

"core functionality
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'benmills/vimux'
Plugin 'altercation/vim-colors-solarized'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'vim-scripts/ZoomWin'
Plugin 'vim-scripts/bufexplorer.zip'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

"programming langs
Plugin 'othree/html5.vim'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-bundler'
Plugin 'NathanNeff/grails-vim'
Plugin 'StanAngeloff/php.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'elixir-lang/vim-elixir'
Plugin 'tpope/vim-classpath'
Plugin 'tpope/vim-fireplace'
Plugin 'fatih/vim-go'
Plugin 'gregsexton/MatchTag'
Plugin 'vim-scripts/paredit.vim'
Plugin 'Keithbsmiley/swift.vim'
Plugin 'mxw/vim-jsx'
Plugin 'zah/nimrod.vim'
Plugin 'kentaroi/cocoa.vim'
Plugin 'rust-lang/rust.vim'
Plugin 'z3t0/arduvim'
Plugin 'udalov/kotlin-vim'
Bundle 'Rykka/riv.vim'

"template langs
Plugin 'cespare/vim-toml'
Plugin 'evidens/vim-twig'
Plugin 'digitaltoad/vim-jade'
Plugin 'slim-template/vim-slim'
Plugin 'wavded/vim-stylus'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-markdown'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'groenewege/vim-less'
Plugin 'juvenn/mustache.vim'

"misc
Plugin 'tpope/vim-fugitive'
Plugin 'gregsexton/gitv'
Plugin 'ledger/vim-ledger'
Plugin 'mattn/gist-vim'
Plugin 'rhysd/vim-clang-format'
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

call vundle#end()

filetype plugin indent on
"syntax on

set noswapfile
set nobackup
set gdefault


" Quickly edit/reload the vimrc file
if has("autocmd")
    autocmd bufwritepost .vimrc source $MYVIMRC
endif

set hidden
set encoding=utf-8
" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autoindent             " automatic indent new lines
set smartindent            " be smart about it
set copyindent             " copy the previous indentation on autoindenting
set nowrap                 " do not wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set smarttab
set formatoptions+=n       " support for numbered/bullet lists

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" sane searching
nnoremap / /\v
vnoremap / /\v

"clear search
nnoremap <leader><space> :noh<cr>
nnoremap <tab> %
vnoremap <tab> %

" lets me use w!! if forgot the sudo business
cmap w!! w !sudo tee % >/dev/null

" split plz
nnoremap <leader><bar> <C-w>v<C-w>l
nnoremap <leader>- :split<cr><C-w>k

"NerdTree
map <leader>n :NERDTreeToggle<cr>

"tagbar
map <leader>t :TagbarToggle<cr>

"easy switching between buffers
nnoremap <leader><leader> <c-^>

" copy to clipboard
nnoremap <leader>c gg"*yG

" Prompt for a command to run
map <Leader>rp :PromptVimTmuxCommand<CR>

" Run last command executed by RunVimTmuxCommand
map <Leader>rl :RunLastVimTmuxCommand<CR>

" Close all other tmux panes in current window
map <Leader>rx :CloseVimTmuxPanes<CR>

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <Leader>rs "vy :call RunVimTmuxCommand(@v)<CR>

" Select current paragraph and send it to tmux
nmap <Leader>rs vip<Leader>vs<CR>

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set gdefault
set ruler                  " show the cursor position all the time
set showmode
set scrolloff=3
set showcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=1                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set ttyfast


" sets colors
set t_Co=256
colorscheme twilight256

if has("gui_running")
  set guioptions=aegimrLt
  set guifont=Iosevka_Term:h16
  colorscheme desert256
  set transparency=15
endif

set list
set listchars=nbsp:·,trail:·,tab:▸\ ,eol:¬
set wildignore+=*.o,*.obj,.git,*.pyc
" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set hlsearch               " highlight searches
set visualbell             " shut the fuck up

set foldlevelstart=99
augroup vimrc
  au BufReadPre * setlocal foldmethod=syntax
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END
" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

"autocmd examples
"autocmd filetype python set expandtab

" Whitespace helper from http://vimcasts.org/episodes/tabs-and-spaces/
" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction


if has('autocmd')
  autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType mvn_pom setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType ftl setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType php setlocal ts=4 sts=4 sw=4 expandtab foldmethod=manual
endif

"setup coffeetags
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif

" add a definition for rust to tagbar
 let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits,traits',
        \'i:impls,trait implementations',
    \]
    \}

" add a definition for Objective-C to tagbar
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'objc',
    \ 'ctagsargs': [
        \ '--options='.expand('~/.vim/tags/ctags-options-objc-source'),
        \ '--objc-kinds=-N',
        \ '--format=2',
        \ '--excmd=pattern',
        \ '--extra=',
        \ '--fields=nksaSmt',
        \ '-f -'
    \ ],
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }

au BufNewFile,BufRead *.zul set filetype=xml
au BufNewFile,BufRead *.ftl set filetype=ftl
au BufNewFile,BufRead *.ace set filetype=jade
au BufRead,BufNewFile *.pde set filetype=cpp
au BufRead,BufNewFile *.ino set filetype=cpp

" vimwiki stuffs
let g:vimwiki_list = [
\ {'path': '~/.wiki', 'syntax': 'markdown'}
\]


" Search Dash for word under cursor
function! SearchDash()
  let s:browser = "/usr/bin/open"
  let s:wordUnderCursor = expand("<cword>")
  let s:url = "dash://".s:wordUnderCursor
  let s:cmd ="silent ! " . s:browser . " " . s:url
  execute s:cmd
  redraw!
endfunction
map <leader>d :call SearchDash()<CR>

set relativenumber " why does it this always get messed up by something

let g:UltiSnipsExpandTrigger="<c-s>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

au FileType go nmap <Leader>gb <Plug>(go-doc-browser)

let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'

nnoremap <leader>jd :YcmCompleter GoTo<CR>

autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!


autocmd FileType javascript set formatprg=prettier\ --stdin

